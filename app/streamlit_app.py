#!/usr/bin/env python3
"""
Interface web Streamlit pour l'OCR avec raisonnement
"""

import streamlit as st
import sys
import os
import json
import tempfile
from pathlib import Path
from PIL import Image
import io

# Ajouter le r√©pertoire parent au path pour importer les modules
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

# Changer le r√©pertoire de travail
os.chdir(root_dir)

try:
    from core.pipeline import pipeline
    from config.settings import settings
    PIPELINE_AVAILABLE = True
except ImportError as e:
    st.error(f"Erreur d'import: {e}")
    st.error("Assurez-vous de lancer l'application depuis le r√©pertoire racine du projet")
    st.code("cd /home/asidimoh/pfe/NEW-OCR && streamlit run app/streamlit_app.py")
    PIPELINE_AVAILABLE = False

def main():
    st.set_page_config(
        page_title="OCR avec Raisonnement",
        page_icon="üîç",
        layout="wide"
    )
    
    if not PIPELINE_AVAILABLE:
        st.stop()
    
    st.title("üîç OCR avec Raisonnement")
    st.markdown("Extrayez du texte et des informations structur√©es de vos documents")
    
    # Sidebar pour la configuration
    with st.sidebar:
        st.header("‚öôÔ∏è Configuration")
        
        # Affichage des mod√®les configur√©s
        st.subheader("Mod√®les")
        st.text(f"OCR: {settings.OCR_MODEL}")
        st.text(f"Layout: {settings.LAYOUT_MODEL}")
        st.text(f"Reasoning: {settings.REASONING_MODEL}")
        st.text(f"Device: {settings.DEVICE}")
        
        # Options de traitement
        st.subheader("Options")
        use_layout = st.checkbox("Utiliser l'analyse de layout", value=True)
        format_type = st.selectbox("Format de sortie", ["plain", "markdown", "json"])
        
        # Gestion m√©moire
        if st.button("üìä Info M√©moire"):
            try:
                memory_info = pipeline.get_memory_info()
                st.metric("M√©moire utilis√©e", f"{memory_info['current_memory_mb']:.1f} MB")
                st.metric("Usage", f"{memory_info['memory_usage_percent']:.1f}%")
            except Exception as e:
                st.error(f"Erreur m√©moire: {e}")
        
        if st.button("üóëÔ∏è D√©charger mod√®les"):
            try:
                pipeline.unload_models()
                st.success("Mod√®les d√©charg√©s")
            except Exception as e:
                st.error(f"Erreur: {e}")
    
    # Interface principale
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üìÑ Document √† traiter")
        
        # Upload de fichier
        uploaded_file = st.file_uploader(
            "Choisissez un fichier",
            type=['png', 'jpg', 'jpeg', 'pdf', 'bmp', 'tiff'],
            help="Formats support√©s: PNG, JPG, JPEG, PDF, BMP, TIFF"
        )
        
        # Prompt utilisateur
        user_prompt = st.text_area(
            "Prompt d'extraction (optionnel)",
            placeholder="Ex: Extraire le nom, l'√¢ge, l'email et le t√©l√©phone",
            help="D√©crivez quelles informations vous voulez extraire"
        )
        
        # Exemples de prompts
        st.subheader("üí° Exemples de prompts")
        example_prompts = [
            "Extraire toutes les informations personnelles",
            "Extraire le montant, la date et le num√©ro de facture",
            "Extraire les comp√©tences et l'exp√©rience professionnelle",
            "Extraire les donn√©es de contact (nom, t√©l√©phone, email)",
            "Extraire les montants et dates importantes"
        ]
        
        for prompt in example_prompts:
            if st.button(f"üìù {prompt}", key=prompt):
                user_prompt = prompt
                st.rerun()
        
        # Bouton de traitement
        process_button = st.button("üöÄ Traiter le document", type="primary", disabled=uploaded_file is None)
    
    with col2:
        st.header("üìä R√©sultats")
        
        if uploaded_file and process_button:
            # Afficher l'image upload√©e
            if uploaded_file.type.startswith('image/'):
                try:
                    image = Image.open(uploaded_file)
                    st.image(image, caption="Document √† traiter", use_container_width=True)
                except Exception as e:
                    st.error(f"Erreur lors du chargement de l'image: {e}")
            
            # Traitement
            with st.spinner("Traitement en cours..."):
                try:
                    # Sauvegarder le fichier temporairement
                    with tempfile.NamedTemporaryFile(delete=False, suffix=f".{uploaded_file.name.split('.')[-1]}") as tmp_file:
                        tmp_file.write(uploaded_file.getvalue())
                        tmp_path = tmp_file.name
                    
                    # Traitement avec la pipeline
                    result = pipeline.process(
                        input_source=tmp_path,
                        user_prompt=user_prompt if user_prompt.strip() else None,
                        use_layout=use_layout,
                        format_type=format_type,
                        output_format="json"
                    )
                    
                    # Nettoyer le fichier temporaire
                    os.unlink(tmp_path)
                    
                    # Afficher les r√©sultats
                    if result['success']:
                        st.success("‚úÖ Traitement r√©ussi !")
                        
                        # Onglets pour diff√©rents types de r√©sultats
                        tab1, tab2, tab3 = st.tabs(["üìù Texte extrait", "üèóÔ∏è Donn√©es structur√©es", "‚ÑπÔ∏è M√©tadonn√©es"])
                        
                        with tab1:
                            st.subheader("Texte extrait")
                            st.text_area("", value=result.get('text', ''), height=300, disabled=True)
                            
                            # Bouton de t√©l√©chargement du texte
                            st.download_button(
                                label="üì• T√©l√©charger le texte",
                                data=result.get('text', ''),
                                file_name=f"texte_extrait_{uploaded_file.name}.txt",
                                mime="text/plain"
                            )
                        
                        with tab2:
                            st.subheader("Donn√©es structur√©es")
                            structured_data = result.get('structured_data')
                            if structured_data:
                                st.json(structured_data)
                                
                                # Bouton de t√©l√©chargement JSON
                                st.download_button(
                                    label="üì• T√©l√©charger JSON",
                                    data=json.dumps(structured_data, indent=2, ensure_ascii=False),
                                    file_name=f"donnees_structurees_{uploaded_file.name}.json",
                                    mime="application/json"
                                )
                            else:
                                st.info("Aucune donn√©e structur√©e extraite. Utilisez un prompt pour extraire des informations sp√©cifiques.")
                        
                        with tab3:
                            st.subheader("M√©tadonn√©es")
                            metadata = {
                                "Pages trait√©es": result.get('pages_processed', 0),
                                "Temps de traitement": f"{result.get('processing_time', 0):.2f}s",
                                "Mod√®le OCR": settings.OCR_MODEL,
                                "Layout utilis√©": use_layout,
                                "Format": format_type
                            }
                            
                            for key, value in metadata.items():
                                st.metric(key, value)
                    
                    else:
                        st.error(f"‚ùå Erreur lors du traitement: {result.get('error', 'Erreur inconnue')}")
                
                except Exception as e:
                    st.error(f"‚ùå Erreur: {e}")
        
        elif not uploaded_file:
            st.info("üëÜ Uploadez un document pour commencer")

if __name__ == "__main__":
    main()